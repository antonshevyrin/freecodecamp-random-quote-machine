{"version":3,"sources":["Quote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","quoteText","quoteAuthor","className","name","App","props","state","currentIndex","quotesAreLoaded","availableQuotes","setRandomQuote","bind","tweetOut","getCurrentFullQuote","getQuoteText","getQuoteAuthor","this","request","axios","get","then","result","setState","data","quotes","abort","quoteIndex","length","newRandomIndex","attempt","Math","floor","random","window","open","type","onClick","text","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+YAsBeA,G,YAjBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,YAAd,OACb,gCAAYC,UAAU,mBACrB,2BACC,kBAAC,IAAD,CAAaC,KAAK,eADnB,OAGEH,EAHF,OAIC,kBAAC,IAAD,CAAaG,KAAK,iBAEnB,4BAAQD,UAAU,qBAAqBD,MCuH1BG,E,YA5Hd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACZN,UAAW,GACXC,YAAa,GACbM,aAAc,EACdC,iBAAiB,EACjBC,gBAAiB,IAGlB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,oBAAsB,EAAKA,oBAAoBF,KAAzB,gBAC3B,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBAdJ,E,iFAiBE,IAAD,OACnBK,KAAKC,QAAUC,IAAMC,IAAI,iBAAiBC,MAAK,SAAAC,GAC9C,EAAKC,SAAS,CACbd,iBAAiB,EACjBC,gBAAiBY,EAAOE,KAAKC,SAE9B,EAAKd,sB,6CAKNM,KAAKC,QAAQQ,U,mCAGDC,GAAa,IACjBjB,EAAoBO,KAAKV,MAAzBG,gBACR,OAAIA,EAAgBkB,OAAS,EACrBlB,EAAgBiB,GAAY1B,UAG7B,K,qCAGO0B,GAAa,IACnBjB,EAAoBO,KAAKV,MAAzBG,gBACR,OAAIA,EAAgBkB,OAAS,EACrBlB,EAAgBiB,GAAYzB,YAG7B,K,4CAGe,IACdM,EAAiBS,KAAKV,MAAtBC,aACFP,EAAYgB,KAAKF,aAAaP,GAC9BN,EAAce,KAAKD,eAAeR,GACxC,MAAM,IAAN,OAAWP,EAAX,aAAyBC,K,uCAGR,IAIb2B,EAJY,OAGZC,EAAU,EAENpB,EAAoBO,KAAKV,MAAzBG,gBACR,GACCmB,EAAiBE,KAAKC,MAAMtB,EAAgBkB,OAASG,KAAKE,UAC1DH,GAAW,QAEXD,IAAmBZ,KAAKT,cACxBsB,GATmB,IAWpBb,KAAKM,UAAS,SAAAhB,GAAK,sBACfA,EADe,CAElBC,aAAcqB,EACd5B,UAAW,EAAKc,aAAac,GAC7B3B,YAAa,EAAKc,eAAea,U,iCAKlCK,OAAOC,KAAP,gDAC0ClB,KAAKH,0B,+BAItC,IAAD,EAC2BG,KAAKV,MAAhCN,EADA,EACAA,UAAWC,EADX,EACWA,YACnB,OACC,yBAAKC,UAAU,iBACd,yBAAKA,UAAU,SACd,kBAAC,EAAD,CAAOF,UAAWA,EAAWC,YAAaA,IAC1C,yBAAKC,UAAU,gCACd,4BACCiC,KAAK,SACLjC,UAAU,kBACVkC,QAASpB,KAAKN,gBAEd,kBAAC,IAAD,CAAaP,KAAK,YALnB,iBAQA,yBAAKD,UAAU,eACd,kBAAC,IAAD,CAAiBmC,KAAMrB,KAAKH,uBAC3B,4BACCsB,KAAK,SACLjC,UAAU,mBAEV,kBAAC,IAAD,CAAaC,KAAK,cAJnB,aAQD,4BACCgC,KAAK,SACLjC,UAAU,kBACVkC,QAASpB,KAAKJ,UAEd,kBAAC,IAAD,CAAaT,KAAK,YALnB,yB,GA7GWmC,aCOEC,QACU,cAA7BN,OAAOO,SAASC,UAEc,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACxB,2DCZHC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtB7B,MAAK,SAAA8B,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4fbcf2a2.chunk.js","sourcesContent":["import React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\nimport PropTypes from \"prop-types\";\nimport \"./Quote.css\";\n\nconst Quote = ({ quoteText, quoteAuthor }) => (\n\t<blockquote className=\"blockquote mb-0\">\n\t\t<p>\n\t\t\t<FontAwesome name=\"quote-left\" />\n\t\t\t&nbsp;\n\t\t\t{quoteText}&nbsp;\n\t\t\t<FontAwesome name=\"quote-right\" />\n\t\t</p>\n\t\t<footer className=\"blockquote-footer\">{quoteAuthor}</footer>\n\t</blockquote>\n);\n\nQuote.propTypes = {\n\tquoteText: PropTypes.string.isRequired,\n\tquoteAuthor: PropTypes.string.isRequired\n};\n\nexport default Quote;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport FontAwesome from \"react-fontawesome\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport \"./App.css\";\nimport Quote from \"./Quote\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tquoteText: \"\",\n\t\t\tquoteAuthor: \"\",\n\t\t\tcurrentIndex: 0,\n\t\t\tquotesAreLoaded: false,\n\t\t\tavailableQuotes: []\n\t\t};\n\n\t\tthis.setRandomQuote = this.setRandomQuote.bind(this);\n\t\tthis.tweetOut = this.tweetOut.bind(this);\n\t\tthis.getCurrentFullQuote = this.getCurrentFullQuote.bind(this);\n\t\tthis.getQuoteText = this.getQuoteText.bind(this);\n\t\tthis.getQuoteAuthor = this.getQuoteAuthor.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.request = axios.get(\"./quotes.json\").then(result => {\n\t\t\tthis.setState({\n\t\t\t\tquotesAreLoaded: true,\n\t\t\t\tavailableQuotes: result.data.quotes\n\t\t\t});\n\t\t\tthis.setRandomQuote();\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.request.abort();\n\t}\n\n\tgetQuoteText(quoteIndex) {\n\t\tconst { availableQuotes } = this.state;\n\t\tif (availableQuotes.length > 0) {\n\t\t\treturn availableQuotes[quoteIndex].quoteText;\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\tgetQuoteAuthor(quoteIndex) {\n\t\tconst { availableQuotes } = this.state;\n\t\tif (availableQuotes.length > 0) {\n\t\t\treturn availableQuotes[quoteIndex].quoteAuthor;\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\tgetCurrentFullQuote() {\n\t\tconst { currentIndex } = this.state;\n\t\tconst quoteText = this.getQuoteText(currentIndex);\n\t\tconst quoteAuthor = this.getQuoteAuthor(currentIndex);\n\t\treturn `\"${quoteText}\" ${quoteAuthor}`;\n\t}\n\n\tsetRandomQuote() {\n\t\t// try to avoid same quote again\n\t\tconst maxAttempts = 10;\n\t\tlet attempt = 1;\n\t\tlet newRandomIndex;\n\t\tconst { availableQuotes } = this.state;\n\t\tdo {\n\t\t\tnewRandomIndex = Math.floor(availableQuotes.length * Math.random());\n\t\t\tattempt += 1;\n\t\t} while (\n\t\t\tnewRandomIndex === this.currentIndex &&\n\t\t\tattempt <= maxAttempts\n\t\t);\n\t\tthis.setState(state => ({\n\t\t\t...state,\n\t\t\tcurrentIndex: newRandomIndex,\n\t\t\tquoteText: this.getQuoteText(newRandomIndex),\n\t\t\tquoteAuthor: this.getQuoteAuthor(newRandomIndex)\n\t\t}));\n\t}\n\n\ttweetOut() {\n\t\twindow.open(\n\t\t\t`https://twitter.com/intent/tweet?text=${this.getCurrentFullQuote()}`\n\t\t);\n\t}\n\n\trender() {\n\t\tconst { quoteText, quoteAuthor } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App container\">\n\t\t\t\t<div className=\"Quote\">\n\t\t\t\t\t<Quote quoteText={quoteText} quoteAuthor={quoteAuthor} />\n\t\t\t\t\t<div className=\"Controls navbar-fixed-bottom\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName=\"btn btn-default\"\n\t\t\t\t\t\t\tonClick={this.setRandomQuote}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FontAwesome name=\"refresh\" />\n\t\t\t\t\t\t\t&nbsp;New quote\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<div className=\"btn-toolbar\">\n\t\t\t\t\t\t\t<CopyToClipboard text={this.getCurrentFullQuote()}>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-default\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<FontAwesome name=\"clipboard\" />\n\t\t\t\t\t\t\t\t\t&nbsp;Copy\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</CopyToClipboard>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tclassName=\"btn btn-default\"\n\t\t\t\t\t\t\t\tonClick={this.tweetOut}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<FontAwesome name=\"twitter\" />\n\t\t\t\t\t\t\t\t&nbsp;Tweet out\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"font-awesome/css/font-awesome.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}